#! /usr/bin/python
import sys
import os
import gtk
import pygtk
import re
import tempfile
import urllib2
import urllib
import shutil
import platform
import xdg.BaseDirectory
import ConfigParser
from threading import Thread
from imdb import IMDb
gtk.gdk.threads_init()

def get_config_dir():
	if platform.system() in ('Windows', 'Microsoft'):
		return os.path.join(os.environ.get('APPDATA'), 'thevnb')
	else:
		return xdg.BaseDirectory.save_config_path('thevnb')

def write_default_config_file(filename):
	config = ConfigParser.RawConfigParser()

class nfo_gui:
	#wTree = gtk.Builder()

	def __init__(self):
		# Setup GUI from file
		self.builder = gtk.Builder()
		self.builder.add_from_file("nfo_builder.glade")
		self.window = self.builder.get_object("main_window")
		if self.window:
			self.window.connect("window-state-event", self.window_changed_state)
			self.window.connect("destroy", self.quit_thevnb)
		else:
			print "Can't get main window"
			exit(0)

		# Setup tree stores for displaying folder contents and search results
		self.contents_store = gtk.TreeStore(str);
		self.search_store = gtk.TreeStore(str)

		# Setup ListStore for displaying icons of poster and fanart
		self.poster_store = gtk.ListStore(gtk.gdk.Pixbuf)
		self.fanart_store = gtk.ListStore(gtk.gdk.Pixbuf)

		# Setup file viewer
		self.folder_view = self.builder.get_object('folder_view')
		col = gtk.TreeViewColumn("Root Movie Folder")
		coll_cell_text = gtk.CellRendererText()
		col.pack_start(coll_cell_text, True)
		col.add_attribute(coll_cell_text, "text", 0)
		self.folder_view.set_model(self.contents_store)
		self.folder_view.append_column(col)
		self.folder_view.connect("row-activated", self.select_folder)

		# Setup search viewer
		self.search_results = self.builder.get_object('search_view')
		col = gtk.TreeViewColumn("Search Results")
		col_cell_text = gtk.CellRendererText()
		col.pack_start(col_cell_text, True)
		col.add_attribute(col_cell_text, "text", 0)
		self.search_results.set_model(self.search_store)
		self.search_results.append_column(col)
		self.search_results.connect('cursor-changed', self.view_search)

		# Setup seach button
		self.search_button = self.builder.get_object('search_button')
		self.search_button.connect_after("clicked", self.imdb_search)

		self.filechooser = self.builder.get_object('filechooser')
		self.filechooser.connect("current_folder_changed", self.populate_folder_view)

		self.download_button = self.builder.get_object('download_button')
		self.fanart_icons = self.builder.get_object('fanart_icons')
		self.poster_icons = self.builder.get_object('poster_icons')
		self.search_view = self.builder.get_object('search_view')
		self.title_entry = self.builder.get_object('title_entry')
		self.imdb_entry = self.builder.get_object('imdb_entry')
		self.runtime_entry = self.builder.get_object('runtime_entry')
		self.rating_entry = self.builder.get_object('rating_entry')
		self.year_entry = self.builder.get_object('year_entry')
		self.studio_entry = self.builder.get_object('studio_entry')
		self.director_entry = self.builder.get_object('director_entry')
		self.cast_entry = self.builder.get_object('cast_entry')
		self.genre_entry = self.builder.get_object('genre_entry')
		self.tagline_entry = self.builder.get_object('tagline_entry')
		self.outline_entry = self.builder.get_object('outline_entry')
		self.plot_entry = self.builder.get_object('plot_entry')
		self.imdb = IMDb(accessSystem='http', adultSearch=0)
		self.poster_image = self.builder.get_object('poster_image')
		self.statusbar = self.builder.get_object('statusbar')
		self.status_context = self.statusbar.get_context_id("my status")
		self.page_opener = urllib2.build_opener()

		self.poster_list = []
		self.fanart_list = []

		# Setup download button
		self.download_button.set_label("Download posters and fanart")
		self.download_button.connect('clicked', self.start_download)
		self.download_button.set_sensitive(False)

		# Setup menu item
		self.save_menu_item = self.builder.get_object('save_menu_item')
		self.save_menu_item.connect_object("activate", self.select_nfo_folder, "file.save")

		# Set store for IconViews
		self.poster_icons.set_model(self.poster_store)
		self.poster_icons.set_pixbuf_column(0)
		self.fanart_icons.set_model(self.fanart_store)
		self.fanart_icons.set_pixbuf_column(0)

		# Load in the configuration file
		self.config = ConfigParser.RawConfigParser()
		config_folder = get_config_dir()
		config_file = os.path.join(config_folder, 'thevnb.conf')
		if os.path.exists(config_file):
			self.config.read(config_file)
		else:
			# Check if folders exists and create them if not
			if not os.path.exists(config_folder):
				os.mkdir(config_folder)

			# Write out default config file
			write_default_config_file(config_file)
			self.config.add_section('Program Defaults')
			home_folder = os.environ['HOME']
			self.config.set('Program Defaults', 'root folder', home_folder)

			with open(config_file, 'wb') as configfile:
				self.config.write(configfile)
		# Load content store with root folder info
		self.fill_contents_store(self.config.get('Program Defaults', 'root folder'))
		self.filechooser.set_current_folder(self.config.get('Program Defaults', 'root folder'))

	def window_changed_state(self, window, event):
		print "Window changed state"
		print event
		#& gtk.gdk.WINDOW_STATE_MAXIMIZED

	def quit_thevnb(self, junk):
		print "Quiting the-vnb"

		# See if the window was maximized
		state = self.window.get_state()
		print state & gtk.gdk.WINDOW_STATE_MAXIMIZED

		# Save out where the root movie folder currently is
		folder_name = self.filechooser.get_filename()
		if folder_name == "":
			folder_name = self.filechooser.get_current_folder()
		print folder_name
		self.config.set('Program Defaults', 'root folder', folder_name)
		config_file = os.path.join(get_config_dir(), 'thevnb.conf')
		with open(config_file, 'wb') as configfile:
			self.config.write(configfile)
		gtk.main_quit()

	def save_out_nfo(self, poster_url, fanart_url, poster, fanart, folder):
		# Download images
		if poster_url:
			urllib.urlretrieve(poster_url, poster)
		if fanart_url:
			urllib.urlretrieve(fanart_url, fanart)

		# Create str representing NFO file
		file_str = '''<?xml version="1.0" encoding="utf-8"?>\n<movie xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n'''
		file_str += '<title>' + self.title_entry.get_text() + "</title>\n"
		file_str += "<year>" + self.year_entry.get_text() + '</year>\n'
		file_str += "<outline>" + self.outline_entry.get_text() + '</outline>\n'
		buf = self.plot_entry.get_buffer()
		start = buf.get_start_iter()
		end = buf.get_end_iter()
		file_str += '<plot>' + self.plot_entry.get_buffer().get_text(start,end) + '</plot>\n'
		file_str += '<runtime>' + self.runtime_entry.get_text() + '</runtime>\n'
		file_str += '<certification>' + self.rating_entry.get_text() + '</certification>\n'
		file_str += '<id>tt' + self.imdb_entry.get_text() + '</id>\n'
		file_str += '<genre>' + self.genre_entry.get_text() + '</genre>\n'
		file_str += '<director>' + self.director_entry.get_text() + '</director>\n'
		file_str += '<tagline>' + self.tagline_entry.get_text() + '</tagline>\n'
		file_str += '<runtime>' + self.runtime_entry.get_text() + '</runtime>\n'
		file_str += '<studio>' + self.studio_entry.get_text() + '</studio>\n'
		file_str += '<rating>' + self.rating_entry.get_text() + '</rating>\n'
		if fanart:
			file_str += '<fanart>' + os.path.split(fanart)[1] + '</fanart>\n'
		else:
			file_str += '<fanart></fanart>\n'
		if poster:
			file_str += '<thumb>' + os.path.split(poster)[1] + '</thumb>\n'
		else:
			file_str += '<thumb></thumb>\n'
		file_str += '</movie>'
		# TODO: figure out cast

		nfo_filename = os.path.join(folder, self.title_entry.get_text() + '.nfo')
		nfo_filename2 = os.path.join(folder, 'movie.nfo')
		fout = open(nfo_filename, 'w')
		fout.write(file_str)
		fout.close()
		fout = open(nfo_filename2, 'w')
		fout.write(file_str)
		fout.close()

	def select_nfo_folder(self, other):
		cursor = self.folder_view.get_cursor()
		if cursor[0] == None:
			# Get folder to save in
			foldersel = gtk.FileChooserDialog(title="Select folder to save into", parent=None,
					action=gtk.FILE_CHOOSER_ACTION_SELECT_FOLDER, buttons = (gtk.STOCK_CANCEL, 
						gtk.RESPONSE_CANCEL, gtk.STOCK_OPEN, gtk.RESPONSE_OK))
			foldersel.set_current_folder(self.filechooser.get_current_folder())
			response = foldersel.run()
			folder = ""
			if response == gtk.RESPONSE_OK:
				folder = foldersel.get_filename()
			foldersel.destroy()
		else:
			folder_num = self.folder_view.get_cursor()[0][0]
			store = self.folder_view.get_model()
			i = store.get_iter(folder_num)
			folder = self.filechooser.get_filename()
			if folder == "":
				folder = self.filechooser.get_current_folder()
			folder = os.path.join(folder, store.get(i, 0)[0])

		print folder
		# Get the poster image to download
		items = self.poster_icons.get_selected_items()
		if len(items) != 0:
			thumb = re.sub('\*', '/', self.poster_list[items[0][0]])
			ext = os.path.splitext(thumb)[1]
			poster = os.path.join(folder, 'folder' + ext)
			poster_url = re.sub('thumb', 'original', thumb)
		else:
			poster = None
			poster_url = None

		# Get the fanart image to download
		items = self.fanart_icons.get_selected_items()
		if len(items) != 0:
			thumb = re.sub('\*', '/', self.fanart_list[items[0][0]])
			ext = os.path.splitext(thumb)[1]
			fanart = os.path.join(folder, 'fanart' + ext)
			fanart_url = re.sub('thumb', 'original', thumb)
		else:
			fanart = None
			fanart_url = None


		# Save out nfo in a seperate thread
		Thread(target=self.save_out_nfo,args=(poster_url,fanart_url,poster,fanart,folder)).start()
		

	def download_images(self,poster_folder,fanart_folder,id):
		os.mkdir(poster_folder)
		os.mkdir(fanart_folder)
		url = "http://api.themoviedb.org/2.1/Movie.imdbLookup/en/xml/4acde11346efa422a66666b90fea1cd0/tt" + str(id)
		page = self.page_opener.open(url)
		xml = page.read()
		m = re.search("<images>(.*?)</images",xml, re.S)
		if m:
			images = m.group(1).strip().split('\n')
			image_list = []
			poster_folder = os.path.join(tempfile.gettempdir(),  "posters_" + id)
			fanart_folder = os.path.join(tempfile.gettempdir(), "fanart_" + id)
			image_count = 0.0
			num_images = len(images)
			poster_num = 0
			fanart_num = 0
			for image in images:
				m = re.search('type="(.*?)".*?url="(.*?)".*?size="(.*?)"', image)
				if not m:
					continue
				type = m.group(1)
				url = m.group(2)
				size = m.group(3)
				ext = os.path.splitext(url)[1]
				if type == "poster" and size == 'thumb':
					file_name = re.sub("/", "*", url)
					full_name = os.path.join(poster_folder, file_name)
					urllib.urlretrieve(url, full_name)
					pixbuf = gtk.gdk.pixbuf_new_from_file(full_name)
					self.poster_store.append([pixbuf])
					self.poster_list.append(file_name)
					poster_num += 1
				if type == "backdrop" and size == 'thumb':
					file_name = re.sub("/", "*", url)
					full_name = os.path.join(fanart_folder, file_name)
					urllib.urlretrieve(url, full_name)
					pixbuf = gtk.gdk.pixbuf_new_from_file(full_name)
					self.fanart_store.append([pixbuf])
					self.fanart_list.append(file_name)
					fanart_num += 1
				image_count += 1
		self.statusbar.pop(self.status_context)



	def start_download(self, other):
		# Get which search item was selected
		num = self.search_results.get_cursor()[0][0]
		movie = self.current_search_results[num]
		id = movie.movieID

		poster_folder = os.path.join(tempfile.gettempdir(),  "posters_" + id)
		fanart_folder = os.path.join(tempfile.gettempdir(), "fanart_" + id)

		# If they haven't been downloaded already do it in a seperate thread
		download = False
		if not os.path.exists(poster_folder):
			self.statusbar.push(self.status_context, "Downloading Poster and Fanart Images")
			download = True
			Thread(target=self.download_images,args=(poster_folder,fanart_folder,id)).start()

		# Add posters and fanart to IconViews
		if not download:
			for file in os.listdir(poster_folder):
				full_name = os.path.join(poster_folder, file)
				pixbuf = gtk.gdk.pixbuf_new_from_file(full_name)
				self.poster_store.append([pixbuf])
				self.poster_list.append(file)
		if not download:
			for file in os.listdir(fanart_folder):
				full_name = os.path.join(fanart_folder, file)
				pixbuf = gtk.gdk.pixbuf_new_from_file(full_name)
				self.fanart_store.append([pixbuf])
				self.fanart_list.append(file)

	def clear_old_info(self):
		self.poster_store.clear()
		self.fanart_store.clear()
		self.poster_image.clear()

		self.poster_list = []
		self.fanart_list = []

		self.imdb_entry.set_text('')
		self.runtime_entry.set_text('')
		self.year_entry.set_text('')
		self.rating_entry.set_text('')
		self.director_entry.set_text('')
		self.studio_entry.set_text('')
		self.cast_entry.set_text('')
		self.genre_entry.set_text('')
		self.tagline_entry.set_text('')
		self.outline_entry.set_text('')
		self.plot_entry.get_buffer().set_text('')


	def view_search(self, sv):
		print 'view_search'
		# Clear icon stores
		self.clear_old_info()
		num = sv.get_cursor()[0][0]
		movie = self.current_search_results[num]
		self.statusbar.push(self.status_context, "Searching for movie " + movie['smart canonical title']);
		while gtk.events_pending() or gtk.gdk.events_pending():
			gtk.main_iteration_do(True)
		movie = self.imdb.get_movie(movie.movieID)
		self.imdb.update(movie, info=('taglines',))

		# title
		if 'smart canonical title' in movie.keys():
			self.title_entry.set_text(movie['smart canonical title'])
		else:
			self.title_entry.set_text('')

		self.imdb_entry.set_text(movie.movieID)

		# plot
		if 'plot' in movie.keys():
			self.plot_entry.get_buffer().set_text(movie['plot'][0].partition('::')[0])
		else:
			self.plot_entry.get_buffer().set_text('')

		# director
		if 'director' in movie.keys():
			self.director_entry.set_text(movie['director'][0]['name'])
		else:
			self.director_entry.set_text('')

		# year
		if 'year' in movie.keys():
			self.year_entry.set_text(str(movie['year']))
		else:
			self.year_entry.set_text('')

		# genre
		if 'genres' in movie.keys():
			genres = ', '.join("%s" % genre for genre in movie['genres'])
			self.genre_entry.set_text(genres)
		else:
			self.genre_entry.set_text('')

		# Rating
		if 'certificates' in movie.keys():
			ratings = ''
			for certificate in movie['certificates']:

				m = re.search('USA:', certificate)
				if m:
					if ratings == '':
						ratings += certificate.partition('::')[0]
					else:
						ratings += ',' + certificate.partition('::')[0]
			self.rating_entry.set_text(ratings)
		else:
			self.rating_entry.set_text('')

		# runtime
		if 'runtimes' in movie.keys():
			self.runtime_entry.set_text(str(movie['runtimes'][0]))
		else:
			self.runtime_entry.set_text('')

		# image preview
		if 'cover url' in movie.keys():
			local_file = os.path.join(tempfile.gettempdir(), movie.movieID + '.jpg')
			if os.path.exists(local_file):
				self.poster_image.set_from_file(local_file)
			else:
				urllib.urlretrieve(movie['cover url'],local_file)
				self.poster_image.set_from_file(local_file)
		else:
			self.poster_image.clear()

		# outline
		if 'plot outline' in movie.keys():
			self.outline_entry.set_text(movie['plot outline'])
		else:
			self.outline_entry.set_text('')

		# tagline
		if 'taglines' in movie.keys():
			self.tagline_entry.set_text(movie['taglines'][0])
		else:
			self.tagline_entry.set_text('')

		# cast
		if 'cast' in movie.keys():
			cast = movie['cast']
			cast = ', '.join("%s" % c['name'] for c in movie['cast'][0:4])
			self.cast_entry.set_text(cast)
		else:
			self.cast_entry.set_text('')

		# studio
		if 'production companies' in movie.keys():
			companies = ', '.join("%s" % c for c in movie['production companies'])
			self.studio_entry.set_text(companies)
		else:
			self.studio_entry.set_text("")

		# clear status bar
		self.statusbar.pop(self.status_context);
		self.download_button.set_sensitive(True)

	def imdb_search(self, button):
		self.clear_old_info()
		search_text = self.title_entry.get_text()
		if search_text == '':
			return
		self.current_search_results = self.imdb.search_movie(search_text)
		self.search_store.clear()
		for result in self.current_search_results:
			self.search_store.append(None, [result])
		#self.fanart.hide()
		self.search_view.show()
		

	def select_folder(self, fv, col_num, four):
		num = col_num[0]
		t = self.contents_store[num][0]
		self.title_entry.set_text(t)
		self.imdb_search(None)

		
	def fill_contents_store(self, path):
		self.contents_store.clear()
		file_list = os.listdir(path)
		file_list.sort()
		for f in file_list:
			fullname = os.path.join(path, f)
			is_dir = os.path.isdir(fullname)
			is_hidden = True if f[0] == '.' else False
			if is_dir and not is_hidden:
				self.contents_store.append(None, [f])

	def populate_folder_view(self, fc):
		folder_name = fc.get_filename()
		if folder_name == "":
			folder_name = fc.get_current_folder()
		self.fill_contents_store(folder_name)
		self.folder_view.set_model(self.contents_store)


gui = nfo_gui()
if gui == None:
	print "Can't load gui from file"
	exit(0)

gui.window.show()
gtk.main()

# -identify -frames 0 -vc null -vo null -ao null"
